# 字符串：有限字符的有序集合
# 表示："str"、'str'、'''str'''...这样的表示可以使得字符串内部出现单双引号，但是，不推荐，可以用"/"转义符达到相同效果
'''这种三引号形式也是一种字符串，但是，如果不用这个字符串，那么其可以当作注释使用
   常见的特定字符："\b"回退、"\n"换行（光标移到下行首）、"\r"回车（光标回到本行首）...'''
# 切片：[a,b[,c]],a、b用法为[a,b)，默认值为起始/或末尾。其中c表示步长，可为负数
''' 1、字符串操作符：
      +： x+y，      连接x与y形成新的字符串
      *： x*n或n*x， 将字符串x复制n次
      in: x in s,    若x是s的子串，返回true，否则为false
''' 
'''2、字符串处理函数：函数形式的字符串处理功能
      len(x):长度、返回字符串x的长度/多少个字符。值得注意的，python中单个数字、字母、符号、汉字，长度相同。
      str(x):x对应的字符串形式。x任何类型皆可，两侧加双引号就是了。字符串则为其本身，于eval()几乎对应（eval()函数还会执行）
      hex(x)、oct(x):将整数x转化为对应的十六进制或者八进制字符串。"0x1a9"、"0o651"等
      chr(u):u为Unicode编码，得到其对应字符
      ord(x):x为字符，返回其Unicode编码

   3、字符串自带的方法：
      str.lower()/upper():   返回字符串大小写
      str.split(step=None):  返回一个列表，根据step分割符分割的各个子字符串构成的列表
      str.count(sub):        统计sub在str中出现的次数
      str.replace(old,new)   返回字符串str的副本，所有old部分被替换为new
      str.center(width[,fillchar]) 使str居中，居中必须要提供宽度，两侧用指定字符填充，filter默认值为空格。
      str.strip(chars):      从str中去掉在其左侧和右侧chars中列出的字符，如"python= ".strip(" np"),结果为"ytho"
      str.join(iter):        在iter变量中，除开最后一个元素外，每个元素后增加一个str。如",".join("12345")="1,2,3,4,5"
                             主要用于字符分隔

   4、字符串的格式化：调整字符串的表达形式/改变字符串的结构
      <模板字符串>.format(<逗号分隔的参数>)
      重要的概念-槽："{}"只在字符串中有用
      槽的格式：{参数位置：输出的参数格式}
      针对输出的参数格式，有两类六种之分。
      第一类：填充，字符任意。对齐方式，<--左对齐、>--右对齐、^--居中对齐。宽度，输出参数占多少个字符，整数。
      第二类：针对数字的输出
             ","千分符号，
             "."精度符号，
             "输出形式", b--二进制,c--unicode符号,d--十进制,o--八进制,x--十六进制,X--大写的十六进制
             e--科学计数法，E--大写的科学计数法,f--浮点数形式输出，%--数字乘以一百最后再加一个"%"
      注意：中文的符号，不能作为语法的一部分，就是普通符号。
            format使用的参数位置用0、1、2...，参数可多（不一定用完），不可少（会报错）
      

'''

# # WeekNamePrintV1.py
# weekstr="一二三四五六七"
# weekid=eval(input("请输入星期数字（1-7）："))
# print("当前为星期"+weekstr[weekid-1])

# print(str("1")) #字符串为其本身

# print("你好".center(20)) #填充默认是空格

# # 如何输出
# for i in range(12):
#     print(chr(9800+i),end="")#在print中，我们可以设置end参数对最后输出的字符进行处理，来设置其是否换行，这里为空，表示不换行

print("1{}2{}34".format(5,6,7,8,9,10))